
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000911  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000696  00000000  00000000  00000c39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003cb  00000000  00000000  000012cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000169c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a0  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003bf  00000000  00000000  00001a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e1f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
/* Función main */
int main (void)
{
	/* Setup */
	unsigned char flag = 1; // Seteo Flag utilizada para saltar de secuencia en secuencia, donde un break no es suficiente
	DDRD = 0xFF; // Configuro Puerto D como salida
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1<<PORTC0) | ~(1<<PORTC1); // Configuro bit0 puerto C como entrada
  84:	87 b1       	in	r24, 0x07	; 7
  86:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<PORTC0) | (1<<PORTC1); // Habilito Pull-Up en bit0 puerto C
  88:	88 b1       	in	r24, 0x08	; 8
  8a:	83 60       	ori	r24, 0x03	; 3
  8c:	88 b9       	out	0x08, r24	; 8
	DDRB |= (1<<PORTB3) | (1<<PORTB4); // Configuro bit3 y bit4 como salida
  8e:	84 b1       	in	r24, 0x04	; 4
  90:	88 61       	ori	r24, 0x18	; 24
  92:	84 b9       	out	0x04, r24	; 4
  94:	2f c0       	rjmp	.+94     	; 0xf4 <main+0x74>
	/* Loop */
	while(1){

		while(flag) { //En lugar de depender de solo break para el salto de secuencia utilizo un flag
			if (PINC & (1<<PINC0)) { //Mientras el boton para cambiar de secuencia siga presionado, se va retener la secuencia, para evitar multiples lecturas de un solo pulso
				if (~PINC & (1<<PINC1)){ //Si el boton de imprimir estado esta presionado, imprimo el nro de secuencia, sino imprimo 0
  96:	31 99       	sbic	0x06, 1	; 6
  98:	07 c0       	rjmp	.+14     	; 0xa8 <main+0x28>
					//PORTB = 0bxxx01xxx;
					PORTB &= ~(1<<4);
  9a:	85 b1       	in	r24, 0x05	; 5
  9c:	8f 7e       	andi	r24, 0xEF	; 239
  9e:	85 b9       	out	0x05, r24	; 5
					PORTB |= (1<<3); 
  a0:	85 b1       	in	r24, 0x05	; 5
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	85 b9       	out	0x05, r24	; 5
  a6:	03 c0       	rjmp	.+6      	; 0xae <main+0x2e>
					} else {
					//PORTB = 0bxxx00xxx;
					PORTB &= ~((1<<3)|(1<<4));
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	87 7e       	andi	r24, 0xE7	; 231
  ac:	85 b9       	out	0x05, r24	; 5
				}
				PORTD = 0b10101010; // Escribo Port D con patrón de bits
  ae:	8a ea       	ldi	r24, 0xAA	; 170
  b0:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	31 ee       	ldi	r19, 0xE1	; 225
  b6:	44 e0       	ldi	r20, 0x04	; 4
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	40 40       	sbci	r20, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x38>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
  c2:	00 00       	nop
				_delay_ms(100); // Delay de 100 ms
				PORTD = 0b01010101; // Escribo Port D con otro patrón de bits
  c4:	85 e5       	ldi	r24, 0x55	; 85
  c6:	8b b9       	out	0x0b, r24	; 11
  c8:	5f ef       	ldi	r21, 0xFF	; 255
  ca:	61 ee       	ldi	r22, 0xE1	; 225
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	51 50       	subi	r21, 0x01	; 1
  d0:	60 40       	sbci	r22, 0x00	; 0
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
				_delay_ms(100); // Delay de 100 ms
				
				if (~PINC & (1<<PINC0)){ //Lectura C0
  da:	30 99       	sbic	0x06, 0	; 6
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <main+0x74>
  de:	9f ef       	ldi	r25, 0xFF	; 255
  e0:	25 ea       	ldi	r18, 0xA5	; 165
  e2:	3e e0       	ldi	r19, 0x0E	; 14
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	20 40       	sbci	r18, 0x00	; 0
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	39 c0       	rjmp	.+114    	; 0x166 <main+0xe6>
	DDRB |= (1<<PORTB3) | (1<<PORTB4); // Configuro bit3 y bit4 como salida
	/* Loop */
	while(1){

		while(flag) { //En lugar de depender de solo break para el salto de secuencia utilizo un flag
			if (PINC & (1<<PINC0)) { //Mientras el boton para cambiar de secuencia siga presionado, se va retener la secuencia, para evitar multiples lecturas de un solo pulso
  f4:	30 9b       	sbis	0x06, 0	; 6
  f6:	fe cf       	rjmp	.-4      	; 0xf4 <main+0x74>
  f8:	ce cf       	rjmp	.-100    	; 0x96 <main+0x16>
					break;
				}
			}
		}
		while(flag){
			if (PINC & (1<<PINC0)) {
  fa:	30 9b       	sbis	0x06, 0	; 6
  fc:	34 c0       	rjmp	.+104    	; 0x166 <main+0xe6>
  fe:	2e c0       	rjmp	.+92     	; 0x15c <main+0xdc>
				
				for (int i=0 ; i<8 ; i++){
					PORTD = (1 << i);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <main+0x8c>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <main+0x88>
 110:	4b b9       	out	0x0b, r20	; 11
 112:	4f ef       	ldi	r20, 0xFF	; 255
 114:	51 ee       	ldi	r21, 0xE1	; 225
 116:	64 e0       	ldi	r22, 0x04	; 4
 118:	41 50       	subi	r20, 0x01	; 1
 11a:	50 40       	sbci	r21, 0x00	; 0
 11c:	60 40       	sbci	r22, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x98>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0xa2>
 122:	00 00       	nop
					_delay_ms(100);
					if (~PINC & (1<<PINC1)){ //Lectura C1
 124:	31 99       	sbic	0x06, 1	; 6
 126:	07 c0       	rjmp	.+14     	; 0x136 <main+0xb6>
						//PORTB = 0bxxx10xxx;
						PORTB |= (1<<4);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	85 b9       	out	0x05, r24	; 5
						PORTB &= ~(1<<3);
 12e:	85 b1       	in	r24, 0x05	; 5
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	85 b9       	out	0x05, r24	; 5
 134:	03 c0       	rjmp	.+6      	; 0x13c <main+0xbc>
						} else {
						//PORTB = 0bxxx00xxx;
						PORTB &= ~((1<<3)|(1<<4));
 136:	85 b1       	in	r24, 0x05	; 5
 138:	87 7e       	andi	r24, 0xE7	; 231
 13a:	85 b9       	out	0x05, r24	; 5
					}
					if (~PINC & (1<<PINC0)){ //Lectura C0
 13c:	30 99       	sbic	0x06, 0	; 6
 13e:	0b c0       	rjmp	.+22     	; 0x156 <main+0xd6>
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	95 ea       	ldi	r25, 0xA5	; 165
 144:	2e e0       	ldi	r18, 0x0E	; 14
 146:	81 50       	subi	r24, 0x01	; 1
 148:	90 40       	sbci	r25, 0x00	; 0
 14a:	20 40       	sbci	r18, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xc6>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xd0>
 150:	00 00       	nop
						_delay_ms(300);
						flag=0;
 152:	90 e0       	ldi	r25, 0x00	; 0
						break;
 154:	08 c0       	rjmp	.+16     	; 0x166 <main+0xe6>
			}
		}
		while(flag){
			if (PINC & (1<<PINC0)) {
				
				for (int i=0 ; i<8 ; i++){
 156:	2f 5f       	subi	r18, 0xFF	; 255
 158:	3f 4f       	sbci	r19, 0xFF	; 255
 15a:	02 c0       	rjmp	.+4      	; 0x160 <main+0xe0>
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	28 30       	cpi	r18, 0x08	; 8
 162:	31 05       	cpc	r19, r1
 164:	6c f2       	brlt	.-102    	; 0x100 <main+0x80>
					_delay_ms(300);
					break;
				}
			}
		}
		while(flag){
 166:	91 11       	cpse	r25, r1
 168:	c8 cf       	rjmp	.-112    	; 0xfa <main+0x7a>
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	66 c0       	rjmp	.+204    	; 0x23a <main+0x1ba>
				}
			}
		}
		flag=1; //Cuando salgo del while porque flag = 0, reseteo el flag en = 1 para quedarme en el siguiente loop hasta que se vuelva a presionar el boton de cambio de secuencia
		while (flag){
			if (PINC & (1<<PINC0)) {
 16e:	30 9b       	sbis	0x06, 0	; 6
 170:	64 c0       	rjmp	.+200    	; 0x23a <main+0x1ba>
 172:	2b c0       	rjmp	.+86     	; 0x1ca <main+0x14a>
				
				for (int i=7 ; i>0 ; i--){
					PORTD = (1 << i);
 174:	41 e0       	ldi	r20, 0x01	; 1
 176:	50 e0       	ldi	r21, 0x00	; 0
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <main+0x100>
 17c:	44 0f       	add	r20, r20
 17e:	55 1f       	adc	r21, r21
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <main+0xfc>
 184:	4b b9       	out	0x0b, r20	; 11
 186:	4f ef       	ldi	r20, 0xFF	; 255
 188:	51 ee       	ldi	r21, 0xE1	; 225
 18a:	64 e0       	ldi	r22, 0x04	; 4
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	50 40       	sbci	r21, 0x00	; 0
 190:	60 40       	sbci	r22, 0x00	; 0
 192:	e1 f7       	brne	.-8      	; 0x18c <main+0x10c>
 194:	00 c0       	rjmp	.+0      	; 0x196 <main+0x116>
 196:	00 00       	nop
					_delay_ms(100);
					if (~PINC & (1<<PINC1)){ //Lectura C1
 198:	31 99       	sbic	0x06, 1	; 6
 19a:	04 c0       	rjmp	.+8      	; 0x1a4 <main+0x124>
						//PORTB = 0bxxx11xxx;
						PORTB |= ((1<<3)|(1<<4));
 19c:	45 b1       	in	r20, 0x05	; 5
 19e:	48 61       	ori	r20, 0x18	; 24
 1a0:	45 b9       	out	0x05, r20	; 5
 1a2:	03 c0       	rjmp	.+6      	; 0x1aa <main+0x12a>
						} else {
						//PORTB = 0bxxx00xxx;
						PORTB &= ~((1<<3)|(1<<4));
 1a4:	45 b1       	in	r20, 0x05	; 5
 1a6:	47 7e       	andi	r20, 0xE7	; 231
 1a8:	45 b9       	out	0x05, r20	; 5
					}
					if (~PINC & (1<<PINC0)){ //Lectura C0
 1aa:	30 99       	sbic	0x06, 0	; 6
 1ac:	0b c0       	rjmp	.+22     	; 0x1c4 <main+0x144>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	25 ea       	ldi	r18, 0xA5	; 165
 1b2:	3e e0       	ldi	r19, 0x0E	; 14
 1b4:	81 50       	subi	r24, 0x01	; 1
 1b6:	20 40       	sbci	r18, 0x00	; 0
 1b8:	30 40       	sbci	r19, 0x00	; 0
 1ba:	e1 f7       	brne	.-8      	; 0x1b4 <main+0x134>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <main+0x13e>
 1be:	00 00       	nop
						_delay_ms(300);
						flag=0;
 1c0:	89 2f       	mov	r24, r25
						break;
 1c2:	08 c0       	rjmp	.+16     	; 0x1d4 <main+0x154>
		}
		flag=1; //Cuando salgo del while porque flag = 0, reseteo el flag en = 1 para quedarme en el siguiente loop hasta que se vuelva a presionar el boton de cambio de secuencia
		while (flag){
			if (PINC & (1<<PINC0)) {
				
				for (int i=7 ; i>0 ; i--){
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	31 09       	sbc	r19, r1
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0x14e>
 1ca:	27 e0       	ldi	r18, 0x07	; 7
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	12 16       	cp	r1, r18
 1d0:	13 06       	cpc	r1, r19
 1d2:	84 f2       	brlt	.-96     	; 0x174 <main+0xf4>
						_delay_ms(300);
						flag=0;
						break;
					}
				}
				if (flag==0) { //Para evitar retrasos en el salto de secuencia se chequea aca el flag
 1d4:	88 23       	and	r24, r24
 1d6:	09 f4       	brne	.+2      	; 0x1da <main+0x15a>
 1d8:	8d cf       	rjmp	.-230    	; 0xf4 <main+0x74>
 1da:	20 e0       	ldi	r18, 0x00	; 0
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	2a c0       	rjmp	.+84     	; 0x234 <main+0x1b4>
					break;
				}
				for (int i=0 ; i<7 ; i++){
					PORTD = (1 << i);
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	50 e0       	ldi	r21, 0x00	; 0
 1e4:	02 2e       	mov	r0, r18
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <main+0x16c>
 1e8:	44 0f       	add	r20, r20
 1ea:	55 1f       	adc	r21, r21
 1ec:	0a 94       	dec	r0
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <main+0x168>
 1f0:	4b b9       	out	0x0b, r20	; 11
 1f2:	4f ef       	ldi	r20, 0xFF	; 255
 1f4:	51 ee       	ldi	r21, 0xE1	; 225
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	50 40       	sbci	r21, 0x00	; 0
 1fc:	60 40       	sbci	r22, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x178>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x182>
 202:	00 00       	nop
					_delay_ms(100);
					if (~PINC & (1<<PINC1)){ //Lectura C1
 204:	31 99       	sbic	0x06, 1	; 6
 206:	04 c0       	rjmp	.+8      	; 0x210 <main+0x190>
						//PORTB = 0bxxx11xxx;
						PORTB |= ((1<<3)|(1<<4));
 208:	45 b1       	in	r20, 0x05	; 5
 20a:	48 61       	ori	r20, 0x18	; 24
 20c:	45 b9       	out	0x05, r20	; 5
 20e:	03 c0       	rjmp	.+6      	; 0x216 <main+0x196>
						} else {
						//PORTB = 0bxxx00xxx;
						PORTB &= ~((1<<3)|(1<<4));
 210:	45 b1       	in	r20, 0x05	; 5
 212:	47 7e       	andi	r20, 0xE7	; 231
 214:	45 b9       	out	0x05, r20	; 5
					}
					if (~PINC & (1<<PINC0)){ //Lectura C0
 216:	30 99       	sbic	0x06, 0	; 6
 218:	0b c0       	rjmp	.+22     	; 0x230 <main+0x1b0>
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	25 ea       	ldi	r18, 0xA5	; 165
 21e:	3e e0       	ldi	r19, 0x0E	; 14
 220:	81 50       	subi	r24, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	30 40       	sbci	r19, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x1a0>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x1aa>
 22a:	00 00       	nop
						_delay_ms(300);
						flag=0;
 22c:	89 2f       	mov	r24, r25
						break;
 22e:	05 c0       	rjmp	.+10     	; 0x23a <main+0x1ba>
					}
				}
				if (flag==0) { //Para evitar retrasos en el salto de secuencia se chequea aca el flag
					break;
				}
				for (int i=0 ; i<7 ; i++){
 230:	2f 5f       	subi	r18, 0xFF	; 255
 232:	3f 4f       	sbci	r19, 0xFF	; 255
 234:	27 30       	cpi	r18, 0x07	; 7
 236:	31 05       	cpc	r19, r1
 238:	9c f2       	brlt	.-90     	; 0x1e0 <main+0x160>
					}
				}
			}
		}
		flag=1; //Cuando salgo del while porque flag = 0, reseteo el flag en = 1 para quedarme en el siguiente loop hasta que se vuelva a presionar el boton de cambio de secuencia
		while (flag){
 23a:	81 11       	cpse	r24, r1
 23c:	98 cf       	rjmp	.-208    	; 0x16e <main+0xee>
 23e:	5a cf       	rjmp	.-332    	; 0xf4 <main+0x74>

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
